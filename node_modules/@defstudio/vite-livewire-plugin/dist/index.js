"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConfig = exports.defaultWatches = void 0;
const minimatch_1 = __importDefault(require("minimatch"));
exports.defaultWatches = [
    '**/resources/views/**/*.blade.php',
    '**/app/**/Livewire/**/*.php',
    '**/app/**/Filament/**/*.php',
    'app/View/Components/**',
];
exports.defaultConfig = {
    watch: exports.defaultWatches,
    refresh: [],
};
function triggerUpdates(ctx, refreshList) {
    const updates = [];
    for (const path of refreshList) {
        let type;
        if (path.endsWith('css')) {
            type = 'css-update';
        }
        else if (path.endsWith('js')) {
            type = 'js-update';
        }
        else {
            continue;
        }
        updates.push({
            type: type,
            path: path,
            acceptedPath: path,
            timestamp: (new Date).getTime(),
        });
    }
    if (updates.length > 0) {
        ctx.server.ws.send({
            type: 'update',
            updates: updates,
        });
    }
}
function refresh(ctx, config) {
    ctx.server.ws.send({
        type: 'custom',
        event: 'livewire-update',
        data: {
            blade_updated: ctx.file.endsWith('.blade.php'),
        }
    });
}
function resolvePluginConfig(config) {
    if (typeof config === 'undefined') {
        config = exports.defaultConfig;
    }
    if (typeof config === 'string') {
        config = [config];
    }
    if (Array.isArray(config)) {
        const watch = config;
        config = { ...exports.defaultConfig };
        config.watch = watch;
    }
    if (typeof config.refresh === 'undefined') {
        config.refresh = exports.defaultConfig.refresh;
    }
    if (typeof config.refresh === 'string') {
        config.refresh = [config.refresh];
    }
    if (typeof config.watch === 'undefined') {
        config.watch = exports.defaultConfig.watch;
    }
    if (typeof config.watch === 'string') {
        config.watch = [config.watch];
    }
    return config;
}
function livewire(config) {
    // There was a typo in first release of this package
    // this const is left for backward compatibility with
    // previous setups.
    const typoVirtualModuleId = 'virtual:tailwind-hot-reload';
    const virtualModuleId = 'virtual:livewire-hot-reload';
    const resolvedVirtualModuleId = '\0' + virtualModuleId;
    const pluginConfig = resolvePluginConfig(config);
    return {
        name: 'Tailwind Plugin',
        pluginConfig: pluginConfig,
        resolveId(id) {
            if (id === virtualModuleId || id === typoVirtualModuleId) {
                return resolvedVirtualModuleId;
            }
        },
        load(id) {
            if (id === resolvedVirtualModuleId) {
                //language=javascript ← automatic language injection for phpstorm
                return `
                    let lastLivewireUpdate = 0;

                    function initConflictingReloadCheck() {
                        window.onload = function () {
                            if (sessionStorage.getItem("livewire_hot_reload_conflict") === '1') {
                                console.error("" +
                                    "[vite] Another Vite plugin reloaded the page whilst " +
                                    "defstudio/vite-livewire-plugin was refreshing a Livewire component. " +
                                    "For optimal results, disable full page reloads when " +
                                    "defstudio/vite-livewire-plugin is enabled. " +
                                    "For more info, visit out docs: https://github.com/def-studio/vite-livewire-plugin");
                            }

                            sessionStorage.setItem("livewire_hot_reload_conflict", '0');

                            window.addEventListener("beforeunload", () => {
                                const now = (new Date()).getTime();

                                if (now - lastLivewireUpdate > 200) {
                                    return;
                                }

                                sessionStorage.setItem("livewire_hot_reload_conflict", '1');
                            });
                        };
                    }

                    function makeOptInCheckbox() {
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.style.cssText = "width: 12px; height: 12px; cursor: pointer";
                        checkbox.id = "livewire_hot_reload";
                        checkbox.checked = (sessionStorage.getItem("livewire_hot_reload") ?? "1") === "1";

                        sessionStorage.setItem("livewire_hot_reload", checkbox.checked ? "1" : "0");
                        console.log("[vite] livewire hot reload " + (checkbox.checked ? "enabled." : "disabled."));

                        checkbox.addEventListener('change', event => {
                            const eventTarget = event.currentTarget;
                            if (eventTarget === null) {
                                return;
                            }
                            if (eventTarget instanceof HTMLInputElement) {
                                sessionStorage.setItem("livewire_hot_reload", eventTarget.checked ? "1" : "0");
                                console.log("[vite] livewire hot reload " + (eventTarget.checked ? "enabled." : "disabled."));
                            }


                        });

                        return checkbox;
                    }

                    function makeOptInLabel() {
                        const label = document.createElement('label');
                        label.style.cssText = "position: fixed; bottom: 10px; right: 10px; font-size: 12px; cursor: pointer";
                        label.innerHTML += "Livewire Hot Reload&nbsp;";

                        return label;
                    }

                    function injectOptInCheckbox() {
                        const label = makeOptInLabel();
                        // noinspection JSCheckFunctionSignatures
                        label.append(makeOptInCheckbox());
                        window.document.body.insertBefore(label, window.document.body.lastChild);
                    }

                    export function livewire_hot_reload() {

                        if (import.meta.hot) {
                            initConflictingReloadCheck();

                            if (import.meta.env.VITE_LIVEWIRE_OPT_IN) {
                                injectOptInCheckbox();
                            } else {
                                console.log("[vite] livewire hot reload enabled.");
                            }

                            import.meta.hot.on('livewire-update', data => {
                                // noinspection JSUnresolvedVariable
                                if (typeof Livewire === "undefined" || Object.keys(Livewire.components).length === 0) {
                                    console.log("[vite] full reload...");
                                    location.reload();
                                    return;
                                }
                                const checkbox = window.document.getElementById("livewire_hot_reload");

                                if (checkbox && !checkbox.checked) {
                                    if (!data.blade_updated) {
                                        return;
                                    }

                                    console.log('[vite] full reload...');
                                    location.reload();

                                    return;
                                }

                                for (const componentId in Livewire.components.componentsById) {
                                    const component = Livewire.components.componentsById[componentId];
                                    component.call('$refresh');
                                }

                                lastLivewireUpdate = (new Date()).getTime();
                                console.log('[vite] livewire hot updated.');
                            });
                        }
                    }
                `;
            }
        },
        handleHotUpdate(ctx) {
            var _a, _b;
            if ((0, minimatch_1.default)(ctx.file, '**/storage/framework/views/**/*.php')) {
                return [];
            }
            for (const pattern of pluginConfig.watch) {
                if ((0, minimatch_1.default)(ctx.file, pattern)) {
                    const refreshList = [...pluginConfig.refresh.filter(path => {
                            if (ctx.modules.length === 0 || !ctx.modules[0]) {
                                return true;
                            }
                            let includeInRefresh = true;
                            ctx.modules[0].importers.forEach(importer => {
                                var _a, _b;
                                includeInRefresh = (_b = !((_a = importer.file) === null || _a === void 0 ? void 0 : _a.endsWith(path))) !== null && _b !== void 0 ? _b : false;
                            });
                            return includeInRefresh;
                        })];
                    triggerUpdates(ctx, refreshList);
                    refresh(ctx, pluginConfig);
                    return [...(_b = (_a = ctx.modules[0]) === null || _a === void 0 ? void 0 : _a.importers) !== null && _b !== void 0 ? _b : [], ...ctx.modules.slice(1)];
                }
            }
        }
    };
}
exports.default = livewire;
